Programa conjuntoDatos
Cabecera Calle     Numero      Piso
F1              Mayor        12           5B
F2              Juan            10           3C
F3
Usamos (;) para separar. (archivo csv)

(Poner throws IOException)
private File archivoTexto;
private String separador; 
private Locale locale; 
private List cabecera; 
private int numeroLineas; 
private int numeroColumnas; 
private double[][] datos; 

public ConjuntoDatos(File archivoTexto, String separador, Locale locale) throws Exception {
 	super(); 
	this.archivoTexto = archivoTexto; 
	this.separador = separador; 
	this.locale = locale;
	this.numeroLineas = numLineas(archivoTexto); 
	this.numeroColumnas = numColumnas(archivoTexto);
	this.cabecera = cabecera(archivoTexto); 
	this.datos = leerDatos(archivoTexto, numeroLineas, numeroColumnas); 
}

private List cabecera(File archivoTexto) throws IOException {
FileReader fr = new FileReader(archivoTexto); // Crea un documento fuera de java (apunta fuera)//
BufferedReader br = new BufferedReader(fr); //Lee el archivo

String cadena; 
cadena = br.readLine(); // lee una linea.
ArrayList cabecera = new ArrayList(); // creamos una lista. 
Scanner scanner = new Scanner(cadena); // Creamos un scanner.
scanner.useDelimiter(this.separador); //Indica el separador 
scanner.useLocale(this.locale); // Indica donde está el archivo

int i = 0; 
while (scanner.hasNext()) {    //Mientras hasNext() = true se ejecutará el bucle. 
	cabecera.add(scanner.next()); // Añade el valor siguiente. 
	i++; // Incrementa la variable que va contando las iteracciones 
}
return cabecera; 
}
private int numLineas(File archivoTexto) throws IOException {
	FileReader fr = new FileReader(archivoTexto); // Creamos archivo que apunta fuera
	BufferedReader br = new BufferedReader(fr); // Creamos un buffered para que lea. 

	int numLineas = 0; // Creamos una variable inicializada a 0 que nos irá almacenando las líneas.
	while ((br.readLine()) != null) { // Se ejecutará mientras sea distinto de null(no hay nada)
		numLineas += 1; (Suma uno a la variable)
	}
br.close(); 
return numLineas - 1; // retorna numero de lineas - 1 porque la cabecera no se cuenta. 
}

private int numColumnas(File archivoTexto) throws IOException  {
	FileReader fr = new FileReader(archivoTexto); // Creamos archivo que apunta fuera.
	BufferedReader br = new BufferedReader(fr); // Creamos buffered para que lea.

	String cadena; // Creamos un String donde cargaremos las lineas que nos lea el buffered//
	int numColumnas = 0; // Variable que nos almacenará numero de columnas. 
	cadena = br.readLine(); // buffered lee una linea
	Scanner scanner = new Scanner(cadena); // Creamos un Scanner
	scanner.useDelimiter(";"); // Indicamos delimitador. Tener en cuenta cual nos dice que es. 

	while (scanner.hasNext()) { // Se ejecutará mientras scanner tenga un siguente (hasNext = true)//
		scanner.next(); // Pasa al siguiente 
		numColumnas += 1; // Suma uno a la variable. 
	}
br.close(); // cierra el buffered
return numColumnas; // retorna numero de columnas. 
}
Otra opcion String [] aux = cadena.split(","); 

public double[] getColumna(int columna) throws Exception {
	if (columna < 0 && columna > numColumnas) { // Comprueba que sea valida el número de columas//
		throw new Exception("Columna no valida"); // lanza excepción en caso de que no//
	}

	double[] tempA = new Double(numeroLineas); //Creamos un array y le metemos numero de lineas como 

	for (int i = 0; i < numeroLineas; i++) {
		tempA[i] = datos[i][columna];  // introducimos 
	}
	return tempA; 
}

public double[] getColumna(String columna) throws Exception {
	int indice = 0; 
	boolean encontrado = false; 
	int i = 0; 

	for (Iterator iterator = cabecera.iterator(); iterator.hasNext();) { // Iteramos la cabecera hatsa que hasNext = false// 
		String cadena = (String) iterator.next(); //Pasa al siguiente de iterator

		if (cadena.equals(columna)) { //Cadena es igual que columna
			indice = 1; 
			encontrado = true; // Ha encontrado la columna. 
			break; // rompe bucle. 
		}
		i++; 
		if (!encontrado) {
			throw = new Exception("Columna no valida"); 
		}
	return getColumna(cadena); 
}

Hay que poner la barra (\) dos veces para escapar de la barra porque es la que utilizamos para "\n" (salto de linea) o "\t" (tabulador). Se ponen dos porque de otra manera se procesa. Ej: "C:\\directory\"
También se puede usar la barra "/" de esta forma: ./src/tema06/escribir
Read - lee carácter a carácter - byte a byte. Solución: usar buffered que lee líneas.
FileReader - lee todo el archivo pero no se puede usar siempre. Lee todo y crea un string y va  metiendo lo leido en un array. 
Scanner - leerá más eficientemente 
Split - Parecido a Scanner 
Stream - 
Write - escribe letra a letra 
fw.write("H")
fw.write("o")
fw.write("l")
fw.write("a")
fw.write(10)
El 10 lo pasa a código ASCII que lo que hace es salto de línea. 
FileWriter - escribe 
PrintWriter - se crea a partir de FileWriter o BufferedWriter o File. Equivalente a Scanner. 
try {} catch {} finally {try{}, catch {} }
Siempre cerrar lo que se usa. br.close(), fr.close(), scanner.close()
try with resources 
try (BufferedReader br = new BufferedReader(new FileReader(file)) {
} catch {
}
Con lo anterior no hace falta finally ni close, porque lo cierra por ti.

Ejercicio:
Nombre      Apellidos      Edad
María          López               23
public void exportaDatosColumna(String nombreColumna) {

}
public String[] getDatosColumna(int numColumna) {

}

Este método creará un archivo ColumnaEdad.txt y su contenido será 23, 17, 46, 5. 
 
Examen de metodología. 
import java.io.BufferedReader; 
Segundo ejercicio. 
Matriz2DReal 
convocatoriaextraordinaria
elementos: double[][]
nFilas: int
nCols: int 
Matriz2DReal(elementos: double[][]) 
getFilas(): int 
getCols(): int 
getElementos(): double[][]
imprime(): void 
productoEscalar(u: double[], y:double[]): double 
traspuesta(): Matriz2DReal
suma(m: Matriz2DReal): Matriz2DReal
opuesta(): Matriz2DReal
producto(

Matriz2DRealDAO static
escribirATexto(matriz: Matriz2DReal, file: File): void
try (BufferedWriter bw = new BufferedWriter(new FileWriter(file) {
	int nFilas = matriz.getnFilas(); 
	int nColumnas = matriz.getCols(); 
	double[][] elementos = matriz. getElementos(); 

	bw.write("NumeroFilas;NumeroColumnas");
	bw.newLine(); 
	bw.write(nFilas + ";" + nColumnas); 
	bw.newLine(); 

	for (int i = 0; i < nFilas; i++) {
		for (int j = 0; j < nColumnas; j++) {
			bw.write(elementos[i][j] + ""); 
			if (j < nColumnas - 1) {
				bw.write(";"); 
				}
		}
	}
	if ( i < nFilas - 1) {
		bw.newLine(); 
	} 
} catch (IOException) {
	e.printStackTrace();
}
}
leerDeTexto(file: File): Matriz2DReal
Matriz2DReal matriz = null; 
try (BufferedReader br = new BufferedReader(new FileReader(file))) {
	String linea; 
	br.readLine(); //leo la cabecera y no la proceso. No la guardo en ninguna variable. 
	//leo las dimensiones de la matriz
	linea = br.readLine(); 
	Scanner sc = new Scanner(linea); 
	sc.useDelimiter(";"); 
	int nFilas = sc.nextInt(); 
	int nColumnas = sc.nextIn(); 
	double  [][] elementos = new Double[nFilas][nColumnas]; 
	
	//leo los elementos de la matriz
	int indiceFilas = 0; 
	while (linea = br.readLine() != null) {
		sc.new Scanner(linea); 
		sc.useDelimiter(";");
		sc.useLocale(Locale.US); 

		int indiceColumnas = 0; 
		while (sc.hasNext()) {
			elementos[indiceFilas][indiceColumnas]; 
			sc.nextDouble(); 
			indiceColumas++;
		}
		indiceFilas++;
	}
matriz = new Matriz2DReal(elementos);
	
escribirABinario(matriz: Matriz2DReal, file: File): void
try (DataOutputStream dos = new DataOutputStream(new FileOutputStream(file))) {
dos.writeInt();
dos.writeInt();
for (int i = 0; i < nFilas; i++) {
	for (int j = 0; j < nColumnas; j++) {
		dos.writeDouble(matriz[i][j]); 
	}
} 
leerDeBinario(file: File): 

Matriz.dat
Numero filas          Numero columnas
3                                    3
1.1, 1.2, 1.3
2.1, 2.2, 2.3
3.1, 3.2, 3.3

Ejercicio 1 
GenericQueue<E>

private int k; 
private int n; 
private GenericQueue<E> cola; 

public GenericJosephus(int k, int n, E[] elementos) {
	this.k = k;
	this.n = n; 
	cola = 
getCola(): GenericQueue<E> 
return cola; 

@Override
toString(): String 
return "Problema de Josephus: k = " + k + ", n = " + n + "/n" + cola.toString(); 

ordenEliminar(cola: GenericQueue<E): String
String salida = " "; 
if ()
else 
salida = "Orden de eleminacion: \n"; 
while (cola.getSize() != 0) {
	for (int i = 1; i < k; i++) {
		cola.queue(

public interface Serializable. No tiene codigo porque identifica los objetos que pueden serializables.  Banco, CuentaCorriente y Movimiento

public double getSaldo() {
double saldo = 0.0; 
Crear object outputStream y escribimos
Crear object imputstream y leer
Class not found exception e; 
